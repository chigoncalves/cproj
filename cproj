#!/usr/bin/env perl


package CliProject;
use 5.024;
use warnings;
use autodie;
use subs qw/__sanitize_file_name __get_macro_identifier/;

use Carp qw/croak/;
use Cwd qw/abs_path/;
use File::Basename qw/dirname/;
use File::Copy qw/copy/;
use File::Copy::Recursive qw/dircopy/;
use File::Path qw/make_path/;
use File::Spec::Functions qw/catdir/;
use File::Temp qw/:seekable/;
use Text::Trim qw/trim/;


sub new {
  my $class = shift;
  my $self = {};

  bless $self, $class;
}

sub configure {
  my $self = shift;
  $self->{name} = trim $self->{name};
  my $name = __sanitize_file_name lc $self->{name};
  $self->{path} = abs_path $name;
  $self->{base_path} = dirname abs_path __FILE__;
  $self->{macro} = __get_macro_identifier $self->{name};

  $self->{template}->{args} = {APP_NAME => $name,
			       PROJECT => $self->{name},
			       BASE_PATH => $self->{path},
			       LANG => $self->{language},
			       PROJECT_MACRO => $self->{macro},
			      };

  $self->{template}->{files} = ['CMakeLists.txt',
				'.dir-locals.el',];

  $self->{files} = ['.dir-locals.el'];

  if (-d $self->{path}) {
    croak "Directory \"$self->{path}\" exists!";
  }
}

sub create {
  my $self = shift;
  make_path catdir $self->{path}, 'src';
  $self->write_readme;

  for my $file (qw/vendor res cmake docs t notes/) {
    my $src = catdir $self->{base_path}, $file;
    my $dest = catdir $self->{path}, $file;
    dircopy $src, $dest;
  }

  copy $self->{source_file_src}, $self->{source_file_dest};
  copy $self->{header_file_src}, $self->{header_file_dest};

  for my $file (@{$self->{files}}) {
    my $src = catdir $self->{base_path}, $file;
    my $dest = catdir $self->{path}, $file;
    copy $src, $dest;
  }

  copy $self->{cmake_listfile_src}, $self->{cmake_listfile_dest};
  $self->process_templates;
}

sub write_readme {
  my $self = shift;
  my $readme = catdir $self->{path}, 'readme.rst';
  open (my $README_FH, '>', $readme);
  my $decorations = '#' x (2 + length $self->{name});

  say {$README_FH} $decorations;
  say {$README_FH} sprintf ' %s', $self->{name};
  say {$README_FH} $decorations, "\n";
  say {$README_FH} $self->{description};

  close $README_FH;
}

sub process_templates {
  my $self = shift;
  my $tmp = File::Temp->new (CLEANUP => 1,
			     TMPDIR => 1,
			     TEMPLATE => 'cproj-XXXXXXX');
  my @variables = keys %{$self->{template}->{args}};
  for my $file (@{$self->{template}->{files}}) {
    my $path = catdir $self->{path}, $file;
    copy $path, $tmp->filename;
    $tmp->seek (0, SEEK_SET);
    open (my $OUT_FH, '>', $path);
    while (my $line = $tmp->getline) {
      chomp $line;
      for my $var (@variables) {
	$line =~ s|<\?\s*$var\s+\?>|$self->{template}->{args}->{$var}|;
      }
      say {$OUT_FH} $line;
    }
  }
}

sub __sanitize_file_name {
  my $name = trim lc $_[0];
  $name =~ s/(\s|_)+/-/g;

  return $name;
}

sub __get_macro_identifier {
  my $name = uc shift;

  $name =~ s/(\W|^\d)/_/g;
  $name =~ s/_+/_/g;
  $name =~ s/(^_|_$)//g;

  return $name;
}


package CCliProject;
use base qw/CliProject/;

use File::Spec::Functions qw/catdir/;

sub new {
  my $class = shift;
  my $self = { %{$_[0]} };

  bless $self, $class;
}

sub configure {
  my $self = shift;
  $self->SUPER::configure;
  $self->{template}->{args}->{HEADER} = 'h';
  $self->{template}->{args}->{SOURCE} = 'c';
  $self->{template}->{args}->{HEADER_FOR_MACRO} = 'H';

  $self->{source_file_src} = catdir $self->{base_path}, qw/src main.c/;
  $self->{source_file_dest} = catdir $self->{path}, qw/src main.c/;

  $self->{header_file_src} = catdir $self->{base_path}, qw/src config.h.in/;
  $self->{header_file_dest} = catdir $self->{path}, qw/src config.h.in/;

  push @{$self->{template}->{files}}, catdir ('src', 'config.h.in');

  $self->{cmake_listfile_src} = catdir $self->{base_path}, qw/CMakeLists.txt/;
  $self->{cmake_listfile_dest} = catdir $self->{path}, qw/CMakeLists.txt/;
}

package CxxCliProject;
use base qw/CCliProject/;

use File::Spec::Functions qw/catdir/;

sub new {
  my $class = shift;
  my $self = { %{$_[0]} };

  bless $self, $class;
}

sub configure {
  my $self = shift;
  $self->SUPER::configure;
  $self->{template}->{args}->{HEADER} = 'hh';
  $self->{template}->{args}->{SOURCE} = 'cc';
  $self->{template}->{args}->{HEADER_FOR_MACRO} = 'HH';

  $self->{source_file_src} = catdir $self->{base_path}, qw/src main.cc/;
  $self->{source_file_dest} = catdir $self->{path}, qw/src main.cc/;

  $self->{header_file_src} = catdir $self->{base_path}, qw/src config.h.in/;
  $self->{header_file_dest} = catdir $self->{path}, qw/src config.hh.in/;

  push @{$self->{template}->{files}}, catdir ('src', 'config.hh.in');
}

package CxxQtCliProject;
use base qw/CxxCliProject/;

use File::Copy qw/copy/;
use File::Spec::Functions qw/catdir/;

sub new {
  my $class = shift;
  my $self = { %{$_[0]} };

  bless $self, $class;
}

sub configure {
  my $self = shift;
  $self->SUPER::configure;
  $self->{source_file_src} = catdir $self->{base_path}, qw/src main-qt.cc/;
  $self->{cmake_listfile_src} = catdir $self->{base_path}, qw/CMakeLists-qt.cmake/;
  $self->{cmake_listfile_dest} = catdir $self->{path}, qw/CMakeLists.txt/;
}


package CliProjectCreator;
use 5.024;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Carp qw/croak/;

sub create_project {
  my @cli_args = @main::ARGV;
  if (scalar @cli_args < 2 || $cli_args[0] ne 'new') {
    pod2usage;
  }

  shift @cli_args;
  my $name = shift @cli_args;

  my %cli_options = (
        description => 'A simple project template.',
        language => 'C',
  );
  my $parser = Getopt::Long::Parser->new;
  $parser->configure (qw/bundling no_ignore_case/);
  $parser->getoptionsfromarray (\@ARGV,
				'language|l=s' => \$cli_options{language},
				'description|d=s' => \$cli_options{description},
				'qt|q' => \$cli_options{qt},
			       ) || pod2usage;

  my $is_qt = delete $cli_options{qt};
  my $project_info = {name => $name,
		      %cli_options};

  $project_info->{language} = uc $project_info->{language};
  if ($project_info->{language} eq 'C') {
    delete $project_info->{qt};
    return CCliProject->new ($project_info);
  }
  elsif ($project_info->{language} eq 'CXX') {
    if ($is_qt) {
      return CxxQtCliProject->new ($project_info);
    }
    delete $project_info->{qt};
    return CxxCliProject->new ($project_info);
  }
  else {
    croak 'Invalid value for \'--language\'';
  }
}


package main;

my $project = CliProjectCreator->create_project;
$project->configure;
$project->create;


__END__

=head1 NAME

cproj - a simple C and C++ command line project skeleton generator.

=head1 SYNOPSIS

cproj new <project-name> [options]

  Options:
    --language, -l         the target language.
    --description, -d      project description.


=head1 OPTIONS

=over 4

=item B<--language>

Chooses the target language, valid options are C or CXX, for C Language
and C++ Language, respectively.

=item B<--description>

A Brief descritpion of the new project.

=cut
